#!/bin/zsh
################################
## Wake County Public Schools ##
## Z Shell function library   ##
################################
## Contributor: Andrew Zimmer ##
## Last updated: 06/30/2022   ##
################################
## Purpose: Use the 'rsync'   ##
## tool to restore a user's   ##
## files to a target folder.  ##
################################
## Arguments:                 ##
## - Directory containing     ##
##   the backup.              ##
## - Destination directory.   ##
## - File with pattern to     ##
##   exclude because of time  ##
##   and non-restorability.   ##
## - Logfile name.            ##
## - If root access is needed ##
##   'Yes' or 'No'            ##
################################
## Output:                    ##
## - Validity of information  ##
##   fed in as arguments.     ##
## - Results of backup.       ##
################################

rsync-user-restore() {
	# Export our customized path
	export PATH="/Library/WCPSS/Apps/bin/:/Library/WCPSS/Apps/sbin/:Library/WCPSS/Scripts/Executables/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/libexec"

	# Set -e/-o errexit to force the script to terminate on any non-zero exit code
	# Set -u/-o nounset to force the script to exit if unset variables are called
	set -o errexit
	set -o nounset

	# Calculate a timestamp for the log file.
	local time_stamp="$(date +"%Y-%m-%d_at_%Hh_%Mm")"
	# Create empty strings for varaibles to be fed in from command line. If they
	# are missing, we'll use defaults. Note that logfile variable is broken into
	# file and directory for a sanity check later on.
	local source_dir=""
	local target_dir=""
	local source_owner=""
	local target_owner=""
	local excludes=""
	local logfile_dir=""
	local logfile=""
	# Do we need to be root?
	local need_root="$5"
	# Set up rsync options.
	# NOTE these should not change!
	# Meaning as follows:
	#  -r for recusing through subdirectories.
	#  -a for 'archive' to preserve permissions.
	#  -H to keep hardlinks.
	#  -E  for preservation of executability bits.
	#  -X for preservation of extended attributes.
	#  -A for preservation of ACLs.
	#  -v for verbose mode.
	#  -P to print progress.
	declare -a rsync_options=(
		-r
		-a
		-H
		-E
		-X
		-A
		-v
		-P
	)

	# If the source directory argument is empty, error out. We need to know that.
	# If there is valid input, set 'source_dir' to that.
	if [[ -z "$1" ]]; then
		echo "A source directory needs to be provided. Exiting."
		exit 1
	else
		source_dir="$1"
	fi

	# If the target directory argument is empty, set default to be 'Backups'
	# one level below the location of the script, with the value of $index_dir
	# for the subdirectories.
	if [[ -z "$2" ]]; then
		echo "A target directory needs to be provided. Exiting."
		exit 1
	else
		target_dir="$2"
	fi

	# If the exclude file is empty, instead use "Supporting/Excludes.txt"
	# relative to the script location.
	if [[ -z "$3" ]]; then
		echo "Excludes file not provided, using default."
		excludes="${SCRIPT_PATH}/Supporting/Excludes.txt"
	else
		excludes="$3"
	fi

	# If the logfile argument is empty, instead use a file relative to the script
	# location at "Logs/(hostname)/(user)/backup-(timestamp).log"
	if [[ -z "$4" ]]; then
		echo "Log directory not provided, please provide one. Exiting."
		exit 1
	else
		logfile_dir="$4"
		logfile="restore-${time_stamp}.log"
	fi

	# Sanity checks that all files fed in exist. We checked earlier that we
	# got arguments fed in, but not their validity. This prevents the rsync
	# command from dying, and should save ISTs trouble if they typo'd a filename.
	#
	# - We fail if the source directory does not exist, for clarity purposes.
	# - We fail if the excludes file does not exist, because customized exclude
	# files would only be used for a reason, so we shouldn't blunder along.
	# - We do not fail if the 'target_dir' check or 'logfile' check show no files,
	# because we can simply create those at the default location.
	if [[ -d "${source_dir}" ]]; then
			# Source directory exists, do nothing.
	else
		echo "Source directory does not exist, exiting."
		exit 1
	fi

	if [[ -d "${target_dir}" ]]; then
		# Target directory exists, do nothing.
	else
		echo "Target directory does not exist, exiting."
	  echo " "
		# Create folder to contain it.
	fi

	if [[ -e "${excludes}" ]]; then
		# Excludes file exists, do nothing.
	else
		echo "Excludes file does not exist, exiting."
		echo " "
		exit 1
	fi

	if [[ -d "${logfile_dir}" ]]; then
		# Logfile destination directory exists, do nothing.
	else
		echo "Logfile destination directory does not exist, creating it at: "${logfile_dir}""
		echo " "
		# Create folder to contain it.
		mkdir -p "${logfile_dir}/"
	  # Reset log directory and logfile name to default.
		logfile_dir="${logfile_dir}/"
	  logfile="restore-${time_stamp}.log"
	fi


	# Now that we've checked everything out, announce that we're getting started,
	# do the backup and check the results. Respond with success or failure.
	# If root access was requested, tweak command to use 'sudo'.
	if [[ "${need_root}" == "Yes" ]]; then
		# Backup as root
			echo "If prompted for a password, please authenticate as a user that can run 'sudo': "
			echo " "
		if sudo ${RSYNC} "${rsync_options[@]}" "${source_dir}/" "${target_dir}/" --exclude-from="${excludes}" > "${logfile_dir}/${logfile}"; then
			echo "Restore successful!"
		else
			echo "Restore might have failed, check the log."
			open "${logfile_dir}/${logfile}"
		fi
	else
		# Same command, not preceeded by 'sudo'.
		if ${RSYNC} "${rsync_options[@]}" "${source_dir}/" "${target_dir}/" --exclude-from="${excludes}" > "${logfile_dir}/${logfile}"; then
			echo "Restore successful!"
			echo " "
		else
			echo "Restore failed. Check the log."
			echo " "
			open "${logfile_dir}/${logfile}"
		fi
	fi
}
