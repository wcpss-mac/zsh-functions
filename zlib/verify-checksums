#!/bin/zsh
################################
## Wake County Public Schools ##
## Z Shell function library   ##
################################
## Contributor: Andrew Zimmer ##
## Last updated: 08/22/2022   ##
################################
## Purpose: Compare two files ##
## by checksum.               ##
################################
## Arguments:                 ##
## - File #1                  ##
## - File #2                  ##
## - Output directory for the ##
##   checksum files.          ##
## - (optional) Checksum type ##
##   default is SHA256        ##
################################
## Output:                    ##
## - If the checksums match,  ##
##    reply "Match".          ##
## - If the checksums do not  ##
##    match or for errors,    ##
##    reply "Mismatch".       ##
################################


verify-checksums() {
	# Export our customized path
	export PATH="/Library/WCPSS/Apps/bin/:/Library/WCPSS/Apps/sbin/:Library/WCPSS/Scripts/Executables/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/libexec"
	# Set -e/-o errexit to force the script to terminate on any non-zero exit code
	set -o errexit
	# Set -u/-o nounset to force the script to exit if unset variables are called
	# In this case, we don't, since variables might be unset by design,
	# so we let logic handle it rather than just dying.
	#set -o nounset

	# Declare some variables for file and path names.
  local file_1=""
  local file_2=""
	local file_1_short=""
	local file_2_short=""
	local output_dir=""

	# Declare some variables to store actual checksums.
	local result_1=""
	local result_2=""

	# Declare variables needed to execute the function and reply to scripts
	# that are calling it.
	local checksum_type=""
	local checksum_command=""
	local response=""

  # Check if we were given any input.
	#
  # If the argument is empty, error out. We need to know that.
  # If there is valid input, set 'file_1' to that.
  if [[ -z "$1" ]]; then
    echo "A file needs to be provided. Exiting."
    exit 1
  else
    file_1="$1"
  fi

	# If the argument is empty, error out. We need to know that.
	# If there is valid input, set 'file_2' to that.
	if [[ -z "$2" ]]; then
		echo "A file needs to be provided. Exiting."
		exit 1
	else
		file_2="$2"
	fi

	# If the argument is empty, error out. We need to know that.
	# If there is valid input, set 'file_2' to that.
	if [[ -z "$3" ]]; then
		echo "A file needs to be provided. Exiting."
		exit 1
	else
		output_dir="$3"
	fi

	# If the argument is empty, proceed with default.
	# Default is SHA256 for thoroughness.
	if [[ -z "$4" ]]; then
		# COMMENTED OUT BELOW FOR USE IN FUNCTION, REMOVE FOR DIAGNOSTICS.
		#echo "No checksum type specified, using default."
		checksum_type="SHA256"
	else
		# COMMENTED OUT BELOW FOR USE IN FUNCTION, REMOVE FOR DIAGNOSTICS.
		#echo "Checksum type specified, using provided value."
		checksum_type="$4"
	fi

	# Check if the files to test actually exist.
	if [[ -f "${file_1}" ]] && [[ -f "${file_2}" ]] ; then
		# Do nothing.
	else
		# Create the directory.
		echo "Specified files do not exist! Exiting."
		exit 1
	fi

	# Check if output directory exists.
	if [[ -d "${output_dir}" ]]; then
		# Do nothing.
		# COMMENTED OUT BELOW FOR USE IN FUNCTION, REMOVE FOR DIAGNOSTICS.
		#echo "Output directory already exists."
	else
		# Create the directory.
		# COMMENTED OUT BELOW FOR USE IN FUNCTION, REMOVE FOR DIAGNOSTICS.
		#echo "Output directory missing, create it."
		mkdir -p "${output_dir}"
	fi

	# Chop the directories off the specified filenames so we can produce a tidy
	# folder of checksums.
	file_1_short=$(basename "${file_1}" )
	file_2_short=$(basename "${file_2}" )

	# Do the actual checksuming, varying based on requested checksum.
	if [[ "${checksum_type}" == "SHA256" ]]; then
		result_1=$( /usr/bin/shasum -a 256 "${file_1}" | cut -f1 -d ' '  )
		result_2=$( /usr/bin/shasum -a 256 "${file_2}" | cut -f1 -d ' '  )
	elif [[ "${checksum_type}" == "SHA1" ]]; then
		result_1=$( /usr/bin/shasum -a 1 "${file_1}" | cut -f1 -d ' '  )
		result_2=$( /usr/bin/shasum -a 1 "${file_2}" | cut -f1 -d ' '  )
	elif [[ "${checksum_type}" == "MD5" ]]; then
		result_1=$( /usr/bin/md5sum "${file_1}" | cut -f1 -d ' '  )
		result_2=$( /usr/bin/md5sum "${file_2}" | cut -f1 -d ' '  )
	else
		echo "Unknown checksum type, exiting."
	fi

	# Write the results to files for consulting later.
	echo "${result_1}" > "${output_dir}/${file_1_short}.checksum.txt"
	echo "${result_2}" > "${output_dir}/${file_2_short}.checksum.txt"

	# Compare the results and report out.
	if [[ "${result_1}" == "${result_2}" ]]; then
		echo "Match"
	else
		echo "Mismatch"
	fi
}
