#!/bin/zsh
################################
## Wake County Public Schools ##
## Z Shell function library   ##
################################
## Contributor: Andrew Zimmer ##
## Last updated: 06/30/2022   ##
################################
## Purpose: Use 'dd' to clone ##
## a binary image from file   ##
## to file (or disk to disk). ##
################################
## Arguments:                 ##
## - Source file or disk      ##
## - Target file or disk      ##
## - Needs admin or not?      ##
## - Block size               ##
################################
## Output:                    ##
## - Errors (if any)          ##
## - Completion message.      ##
################################

binary-clone() {
	# Export our customized path
	export PATH="/Library/WCPSS/Apps/bin/:/Library/WCPSS/Apps/sbin/:Library/WCPSS/Scripts/Executables/:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/libexec"

	# Set -e/-o errexit to force the script to terminate on any non-zero exit code
	# Set -u/-o nounset to force the script to exit if unset variables are called
	set -o errexit
	set -o nounset
	set -x

	# Declare some variables for source and target files, whether to run as root or not, and block size.
  local source=""
  local target=""
	local root=""
	local bsize=""

	# Set up some variables for log files.
	local log_dir="/Library/WCPSS/Logs"
	local log_file_1=""
	local log_file_2=""


  # If the source file argument is empty, error out. We need to know that.
  # If there is input, set 'source' to that.
  if [[ -z "$1" ]]; then
	    echo "A source file needs to be provided. Exiting."
	    exit 1
  else
	    source="$1"
  fi

	# If the target file argument is empty, error out. We need to know that.
  # If there is input, set 'target to that.
  if [[ -z "$2" ]]; then
	    echo "A target file needs to be provided. Exiting."
	    exit 1
  else
	    target="$2"
  fi

	# If the argument is empty, error out. We need to know that.
  # If there is input, set 'root' to that.
  if [[ -z "$3" ]]; then
	    echo "We need to know if we're operating as root or not. Exiting."
	    exit 1
  else
			# Check that the argument about being root is validly formatted.
			if [[ "$3" == "Yes" || "$3" == "No" ]]; then
				# Valid input given, Set the appropriate variable.
				echo "Valid format!"
				root="$3"
			else
				# Incorrectly formatted input, display a help message.
				echo "We need to know if we're operating as root or not. Specify this in "Yes" or "No" format, with quotes. Exiting."
				exit 1
			fi
	fi

	# If the argument is empty, error out. We need to know that.
  # If there is input, set 'admin' to that.
  if [[ -z "$4" ]]; then
	    echo "We need to be given a block size to work with!"
	    exit 1
  else
    	bsize="$4"
  fi

	# Compute the logfile names.
	log_file_1=$(echo $(basename "${source%.*}"))
	log_file_2=$(echo $(basename "${target%.*}"))

	# If needed, make the log directory.
	mkdir -p "${log_dir}"

	# Check if the source file actually exists. If so, clone the information,
	# using root if it was requested.
	if [[ -f "${source}" ]]; then
			# We've confirmed the source file exists, let's go.
			echo "Source file exists, proceeding..."
			echo " "
			if [[ "${root}" == "No" ]]; then
					if dd if="${source}" of="${target}" bs="${bsize}" status=progress > ""${log_dir}"/Cloning_${log_file_1}__to__"${log_file_2}".log" ; then
							echo " "
							echo "Cloning completed."
					else
							echo "Cloning failed!"
							exit 1
					fi
			elif [[ "${root}" == "Yes" ]]; then
					echo "Sign in as a user who can use 'sudo': "
					if sudo dd if="${source}" of="${target}" bs="${bsize}" status=progress > ""${log_dir}"/Cloning_${log_file_1}__to__"${log_file_2}".log" ; then
							echo " "
							echo "Cloning completed."
					else
							echo "Cloning failed!"
							exit 1
					fi
			else
					# Incorrectly formatted input, display a help message.
					echo "The argument for whether or not to act as root is malformed!"
					echo "Provide this in 'Yes' or 'No' formats."
			fi
	else
			# Source file missing, error out.
			echo "Source file does not exist! We cannot proceed. Exiting."
			exit 1
	fi
}
